# logging.pattern.console= 在控制台输出的 log 的格式
# logging.pattern.file=   在文件里打印的 log 的格式

# logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger{15} ===> %msg%n
# 2023-06-20 09:01:31 INFO  [main] o.s.b.w.e.t.TomcatWebServer ===> Tomcat initialized with port(s): 8080 (http)

logging.pattern.dateformat=yyy-MM-dd HH:mm:ss.SSS


# SpringBoot 中可以精确地调整某一个类的日志级别 或是 某一个包下所有类的日志级别
# 如果不调的话，所有类都会默认使用这个级别
# 如果没有精确制定级别，就使用 root 的默认级别，而 root 的默认级别是 info
# logging.level.root=debug

# 精确调整某个包下的日志界别，也可以精确到类级别
logging.level.com.atguigu.logging.controller=warn

# 日志分组：
# 场景：比如我们现在有一堆包，我们想让他们的日志界别都一样，要是 info 都是info，要是 debug 都是 debug
# 就需要都进行设置，有点麻烦
#logging.level.com.atguigu.logging.aaa=warn
#logging.level.com.bbb=warn
#logging.level.com.ccc=warn

# 创建一个 abc 组
logging.group.abc=com.atguigu.logging.aaa,com.bbb,com.ccc
logging.level.abc=info
# 这样就可以一调调一组


# 指定日志文件的路径
logging.file.path=
# 指定日志文件的名：
# 1、只写名字（没写路径），就生成到当前项目
# 2、写名字+路径: 生成到指定位置的指定文件
#         file.path 和 file.name 同时 specify 时，以 file name 为准
#         只写 file path 不写 file name，会在指定位置生成一个 名字为 spring.log 的文件
logging.file.name=/Users/shihaosun/Desktop/haha.log
# D:\\demo.log     D盘
# 如果 file path 和 file name 都没配置（指定），就默认 仅控制台输出
# 如果 制定了 file path 但没有指定 file name，默认 name 为 spring.log


# 归档、切割
logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz
# %d 代表接下来要格式化一个日期
# %i 代表这是今天的第几个文件
# .gz  是 linux 里边的压缩包格式
logging.logback.rollingpolicy.max-file-size=1MB
# 注意：这种直接 在 applications.properties 里 配置的方式，只支持 logback 这个 日志，因为我们 SpringBoot 默认就是用它
# 如果你在底层换了其他日志框架，例如 log4j2，那你就直接在项目里边（recourses folder下）加一个 log4j2 的配置文件就可以了
# 例如，对于 log4j2，配置文件名必须为 log4j2.xml 或 log4j2-spring.xml

# 如果你不想在这个 application.properties 里配 logback，那么可以在 resource folder 下加一个 logback.xml 配置文件 或 logback-spring.xml

# log4j2 的性能要明显高于 logback
